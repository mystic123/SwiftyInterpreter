comment "//" ;
comment "/*" "*/" ;
entrypoints Program ;

Prog.    Program  ::= [Form] ;

D_Fun.   Decl     ::= "func" Ident "(" [PDecl] ")" "->" Type Block ;
D_Proc.  Decl     ::= "func" Ident "(" [PDecl] ")" Block ;

P_Decl.  PDecl    ::= Ident ":" Type ;

separator            PDecl  "," ;
separator            Stmt   "" ;
separator            Exp    "," ;
separator            Form   "" ;
separator   nonempty Ident  "," ;
separator   nonempty Type   "," ;

F_Decl.   Form  ::= Decl ;
F_Stmt.   Form  ::= Stmt ;
F_Block.  Form  ::= Block ;

S_Block.  Block ::= "{" [Stmt] "}" ;

S_While.  Stmt ::= "while" "(" Exp ")" Stmt ;
S_For.    Stmt ::= "for" Ident "in" Exp Stmt ;
S_If.     Stmt ::= "if" "(" Exp ")" Stmt ;
S_IfE.    Stmt ::= "if" "(" Exp ")" Stmt "else" Stmt ;
S_Return. Stmt ::= "return" Exp ;
S_Print.  Stmt ::= "print" Exp ;
S_Assign. Stmt ::= Ident "=" Exp ;
S_StrAss. Stmt ::= Ident StructSub "=" Exp ;
S_Exp.    Stmt ::= FCall ;

Fun_Call.   FCall ::= Ident "(" [Exp] ")" ;

E_TupI.     Exp  ::= TupleInit ;
E_ArrI.     Exp  ::= ArrayInit ;
E_Or.       Exp1  ::= Exp1 "||" Exp2 ;
E_And.      Exp2  ::= Exp2 "&&" Exp3 ;
E_Eq.       Exp3  ::= Exp3 "==" Exp4 ;
E_Neq.      Exp3  ::= Exp3 "!=" Exp4 ;
E_Lt.       Exp4  ::= Exp4 "<" Exp5 ;
E_Gt.       Exp4  ::= Exp4 ">" Exp5 ;
E_Lte.      Exp4  ::= Exp4 "<=" Exp5 ;
E_Gte.      Exp4  ::= Exp4 ">=" Exp5 ;
E_Add.      Exp5  ::= Exp5 "+" Exp6 ;
E_Subt.     Exp5  ::= Exp5 "-" Exp6 ;
E_Mult.     Exp6  ::= Exp6 "*" Exp7 ;
E_Div.      Exp6  ::= Exp6 "/" Exp7 ;
E_Min.      Exp7  ::= "-" Exp8 ;
E_Neg.      Exp7  ::= "!" Exp8 ;
E_ArrS.     Exp8  ::= Exp8 ArraySub ;
E_StrS.     Exp8  ::= Exp8 StructSub ;
E_FuncCall. Exp8  ::= FCall ;
E_Const.    Exp8  ::= Constant ;
E_VarName.  Exp8  ::= Ident ;

Arr_Sub.    ArraySub    ::= "[" Exp "]" ;
Arr_Init.   ArrayInit   ::= "{" [Exp] "}" ;
Tup_Init.   TupleInit   ::= "(" Exp "," [Exp] ")" ;
Str_Sub.    StructSub   ::= "." Ident ;

coercions   Exp   8 ;

False_Const.   Constant ::= "false";
True_Const.  	Constant ::= "true";
Integer_Const. Constant ::= Integer;

T_Int.   Type  ::= "int" ;
T_Bool.  Type  ::= "bool" ;
T_Arr.   Type  ::= "Array" "of" Type ;
T_Tup.   Type  ::= "(" [Type] ")" ;
T_Ref.   Type  ::= "&" Type;
