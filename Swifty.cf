-- Author: Pawel Kapica, 334579
-- Swifty language grammar 
comment "//" ;
comment "/*" "*/" ;
entrypoints Program ;

Prog.    Program  ::= [Stmt] ;

D_Fun.   Decl     ::= "func" Ident "(" [PDecl] ")" "->" Type Stmt ;
D_Proc.  Decl     ::= "func" Ident "(" [PDecl] ")" Stmt ;
D_Var.	Decl		::= "var" Ident "=" Expr ;
D_Str.	Decl		::= "struct" Ident ;
D_MVar.  Decl     ::= "var" Ident "," [Ident] "=" Expr ;

P_Decl.  PDecl    ::= Ident ":" Type ;

separator            PDecl  "," ;
separator            Stmt   "" ;
separator            Expr   "," ;
separator	nonempty	Acc	 "," ;
separator   nonempty Ident  "," ;
separator	nonempty Type   "," ;

B_Block.  Block ::= "{" [Stmt] "}" ;

A_Iden.	 Acc	::= Ident ;
A_Arr.	 Acc	::= Acc ArraySub ;
A_Str.	 Acc  ::= Acc StructSub ;

S_Block.	 Stmt ::= Block ;
S_Decl.	 Stmt ::= Decl ;
S_Assign. Stmt ::= Acc "=" Expr ;
S_MAss.	 Stmt ::= Acc "," [Acc] "=" Tuple ;
S_While.  Stmt ::= "while" "(" Expr ")" Stmt ;
S_For.    Stmt ::= "for" Ident "in" Acc Stmt ;
S_If.     Stmt ::= "if" "(" Expr ")" Stmt ;
S_IfE.    Stmt ::= "if" "(" Expr ")" Block "else" Stmt ;
S_Return. Stmt ::= "return" Expr ;
S_Print.  Stmt ::= "print" Expr ;
S_Expr.   Stmt ::= FCall ;

Fun_Call.   FCall ::= Ident "(" [Expr] ")" ;

E_Or.       Expr1  ::= Expr1 "||" Expr2 ;
E_And.      Expr2  ::= Expr2 "&&" Expr3 ;
E_Eq.       Expr3  ::= Expr3 "==" Expr4 ;
E_Neq.      Expr3  ::= Expr3 "!=" Expr4 ;
E_Lt.       Expr4  ::= Expr4 "<" Expr5 ;
E_Gt.       Expr4  ::= Expr4 ">" Expr5 ;
E_Lte.      Expr4  ::= Expr4 "<=" Expr5 ;
E_Gte.      Expr4  ::= Expr4 ">=" Expr5 ;
E_Add.      Expr5  ::= Expr5 "+" Expr6 ;
E_Subt.     Expr5  ::= Expr5 "-" Expr6 ;
E_Mult.     Expr6  ::= Expr6 "*" Expr7 ;
E_Div.      Expr6  ::= Expr6 "/" Expr7 ;
E_Min.      Expr7  ::= "-" Expr8 ;
E_Neg.      Expr7  ::= "!" Expr8 ;
E_Lambda.	Expr8	 ::= "(" [PDecl] ")" "->" Type "in" Block ;
E_ArrI.     Expr8  ::= Array ;
E_ArrI2.		Expr8	 ::= "array" "(" Expr "," Expr ")" ;
E_TupI.     Expr8  ::= Tuple ;
E_ArrS.     Expr8  ::= Acc ArraySub ;
E_StrS.     Expr8  ::= Acc StructSub ;
E_FuncCall. Expr8  ::= FCall ;
E_Const.    Expr8  ::= Constant ;
E_VarName.  Expr8  ::= Ident ;

Arr_Sub.    ArraySub    ::= "[" Expr "]" ;
Arr.        Array       ::= "{" [Expr] "}" ;
Tup.        Tuple       ::= "(" Expr "," [Expr] ")" ;
Str_Sub.    StructSub   ::= "." Ident ;

coercions   Expr   8 ;

False_Const.   Constant ::= "false";
True_Const.  	Constant ::= "true";
Integer_Const. Constant ::= Integer;

_.			Type	::= "(" Type ")" ;
T_Int.   Type  ::= "int" ;
T_Bool.  Type  ::= "bool" ;
T_Arr.   Type  ::= "Array" "of" Type ;
T_Tup.   Type  ::= "(" Type "," [Type] ")" ;
T_Ref.   Type  ::= "&" Type;
T_Foo.	Type	::= "func" "(" ")" "->" Type ;
T_FooA.	Type	::= "func" "(" [Type] ")" "->" Type ;
