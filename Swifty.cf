comment "//" ;
comment "/*" "*/" ;
entrypoints Program ;

Prog.    Program  ::= [Form] ;

D_Fun.   Decl     ::= "func" Ident "(" [PDecl] ")" "->" Type Block ;
D_Proc.  Decl     ::= "func" Ident "(" [PDecl] ")" Block ;

P_Decl.  PDecl    ::= Ident ":" Type ;

separator            PDecl  "," ;
separator            Stmt   "" ;
separator            Expr   "," ;
separator            Form   "" ;
separator   nonempty Ident  "," ;
separator   nonempty Type   "," ;

F_Decl.   Form  ::= Decl ;
F_Stmt.   Form  ::= Stmt ;
F_Block.  Form  ::= Block ;

S_Block.  Block ::= "{" [Stmt] "}" ;

S_While.  Stmt ::= "while" "(" Expr ")" Stmt ;
S_For.    Stmt ::= "for" Ident "in" Expr Stmt ;
S_If.     Stmt ::= "if" "(" Expr ")" Stmt ;
S_IfE.    Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt ;
S_Return. Stmt ::= "return" Expr ;
S_Print.  Stmt ::= "print" Expr ;
S_Assign. Stmt ::= Ident "=" Expr ;
S_StrAss. Stmt ::= Ident StructSub "=" Expr ;
S_Expr.   Stmt ::= FCall ;

Fun_Call.   FCall ::= Ident "(" [Expr] ")" ;

E_TupI.     Expr   ::= TupleInit ;
E_ArrI.     Expr   ::= ArrayInit ;
E_Or.       Expr1  ::= Expr1 "||" Expr2 ;
E_And.      Expr2  ::= Expr2 "&&" Expr3 ;
E_Eq.       Expr3  ::= Expr3 "==" Expr4 ;
E_Neq.      Expr3  ::= Expr3 "!=" Expr4 ;
E_Lt.       Expr4  ::= Expr4 "<" Expr5 ;
E_Gt.       Expr4  ::= Expr4 ">" Expr5 ;
E_Lte.      Expr4  ::= Expr4 "<=" Expr5 ;
E_Gte.      Expr4  ::= Expr4 ">=" Expr5 ;
E_Add.      Expr5  ::= Expr5 "+" Expr6 ;
E_Subt.     Expr5  ::= Expr5 "-" Expr6 ;
E_Mult.     Expr6  ::= Expr6 "*" Expr7 ;
E_Div.      Expr6  ::= Expr6 "/" Expr7 ;
E_Min.      Expr7  ::= "-" Expr8 ;
E_Neg.      Expr7  ::= "!" Expr8 ;
E_ArrS.     Expr8  ::= Expr8 ArraySub ;
E_StrS.     Expr8  ::= Expr8 StructSub ;
E_FuncCall. Expr8  ::= FCall ;
E_Const.    Expr8  ::= Constant ;
E_VarName.  Expr8  ::= Ident ;

Arr_Sub.    ArraySub    ::= "[" Expr "]" ;
Arr_Init.   ArrayInit   ::= "{" [Expr] "}" ;
Tup_Init.   TupleInit   ::= "(" Expr "," [Expr] ")" ;
Str_Sub.    StructSub   ::= "." Ident ;

coercions   Expr   8 ;

False_Const.   Constant ::= "false";
True_Const.  	Constant ::= "true";
Integer_Const. Constant ::= Integer;

T_Int.   Type  ::= "int" ;
T_Bool.  Type  ::= "bool" ;
T_Arr.   Type  ::= "Array" "of" Type ;
T_Tup.   Type  ::= "(" [Type] ")" ;
T_Ref.   Type  ::= "&" Type;
