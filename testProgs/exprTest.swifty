//zwykla funkcja
func fiboIter(n:int) -> int {
	var a,b = (0,1)
	while (n > 1) {
		var tmp = a
		a = b
		b = tmp + b
		n = n - 1
	}
	return b
}

//rekurencja, zagniezdzone funkcje
func fiboRec(n:int) -> int {
	func minusOne(x:int) -> int {
		return x - 1
	}
	func minusTwo(x:int) -> int {
		return minusOne(minusOne(x))
	}
	if (n == 0) 
		return 0
	if (n == 1) 
		return 1
	return fiboRec(minusOne(n)) + fiboRec(minusTwo(n))
}

//procedura, dynamiczne wiazanie
func printt() {
	//te zmienne sa jeszcze niezadeklarowane w tym miejscu
	print fi
	print fr
}

func printX() {
	print x
}

//przekazywanie przez referencje
func fiboMemo(n:int, memory:&Array of int) -> int {
	memory[0] = 0
	memory[1] = 1
	func fiboWithMemo(n:int) -> int {
		if (n == 0) {
			return 0
		}
		else if (n == 1) {
				return 1
		} else {
			if (memory[n] == -1) {
				var f = fiboWithMemo(n-1) + fiboWithMemo(n-2)
				memory[n] = f
			}
		}
		return memory[n]
	}
	if (memory[n] == -1) {
		return fiboWithMemo(n)
	} else {
		return memory[n]
	}
}

//zmienne
var a = 10
a = 20
var b = true
b = false
//redeklaracja zmiennej w tym samym bloku - zmienna a typu int przestaje byc dostepna
var a = false

var n = 10
var fi = fiboIter(n)
var fr = fiboRec(n)

printt()

//tablice
//array(n, x) tworzy tablice o rozmiarze n z powtorzona wartoscia x
var fiboNumbers = array(11,-1)

//lista inicjalizacyjna
var arr = {1,2,3}
//dzialania na tablicach
arr = arr + 5 // {6,7,8}
arr = arr - 3 // {3,4,5}
arr = arr * 10 // {30,40,50}
arr = arr / 2 // {15,20,25}
print arr 

//wielowymiarowa tablica o rozmiarze 10x10 wypelniona 0
var arr2 = array(10, array(10, 0))
//modyfikacja komorek tablicy
arr2[0][0] = 10
arr2[5][5] = 50
arr2[9][9] = 90

//foreach
for x in arr2 {
	//tablica jest przekazywana przez referencje, tzn ta linijka ja modyfikuje nie tylko lokalnie
	x[1] = 1
	print x
}

var fm = fiboMemo(5,fiboNumbers)
print fiboNumbers
fm = fiboMemo(10,fiboNumbers)
print fiboNumbers

//bloki
var x = 10
{
	printX() // 10
	x = 20
	printX() // 20
	var x = false
	printX() // false
	{
		printX() // false
		x = true
	}
	printX() // true
}
printX() // 20
